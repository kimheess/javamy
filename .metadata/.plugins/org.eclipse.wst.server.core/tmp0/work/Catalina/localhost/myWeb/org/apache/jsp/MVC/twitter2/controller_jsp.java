/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-03 06:29:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.MVC.twitter2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import mvc.twitter.*;

public final class controller_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("mvc.twitter");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	if(request.getMethod().equals("POST")){  //한글 안꺠지게 
		request.setCharacterEncoding("UTF-8");
	}	


      out.write("\r\n");
      out.write("\r\n");
      mvc.twitter.TwitterDAO twitterDAO = null;
      synchronized (session) {
        twitterDAO = (mvc.twitter.TwitterDAO) _jspx_page_context.getAttribute("twitterDAO", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (twitterDAO == null){
          twitterDAO = new mvc.twitter.TwitterDAO();
          _jspx_page_context.setAttribute("twitterDAO", twitterDAO, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      mvc.twitter.TwitterDO twitterDO = null;
      twitterDO = (mvc.twitter.TwitterDO) _jspx_page_context.getAttribute("twitterDO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (twitterDO == null){
        twitterDO = new mvc.twitter.TwitterDO();
        _jspx_page_context.setAttribute("twitterDO", twitterDO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      mvc.twitter.TwitterLoginDO loginDO = null;
      loginDO = (mvc.twitter.TwitterLoginDO) _jspx_page_context.getAttribute("loginDO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (loginDO == null){
        loginDO = new mvc.twitter.TwitterLoginDO();
        _jspx_page_context.setAttribute("loginDO", loginDO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("twitterDO"), "message", request.getParameter("message"), request, "message", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("loginDO"), request);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String viewPath = "/WEB-INF/views/twitter2/"; //-> 뷰의 위치 
	String command = request.getParameter("command"); 			// command 파라미터 받아오기  로그아웃 기능 

	if(session.getAttribute("id") == null ){
		if(request.getMethod().equals("GET")){ // -> (1)(로그인이 안됐는데 GET으로 요청이 왔음) =>(1) forward / twitterLogin 
			pageContext.forward(viewPath + "twitterLogin.jsp");
		}
		else if(request.getMethod().equals("POST")){ //(2) 로그인 요청  성공 여부에 따라 화면이 달라짐
			TwitterLoginDO tDO =  twitterDAO.checkLogin(loginDO);			// --> loginDO를 반환 이름 필요 
			
			if(tDO != null){							// 1)로그인 성공 시 세션에 id와 name 저장 
				session.setAttribute("id",tDO.getId());			
				session.setAttribute("name",tDO.getName());		
				
				response.sendRedirect("controller.jsp");  //	sendRedirect 방식		// 1)마지막 else 문으로 간다 
				// session.setAttribute("list",twitterDAO.getAllTwitter()); //
				// pageContext.forward(viewPath + "twitterList.jsp"); // 		forward 방식 하지만 코드 중복으로 	sendRedirect 쓴다 
			}
			else{				// -> 로그인 실패시  다시 로그인 페이지로 보낸다 
				pageContext.forward(viewPath + "twitterLogin.jsp");
			}
		}
	}
	else {																// 1) 로그인 성공 이쪽으로 이동 한다. 

		if (command != null && command.equals("logout")){                // (3) 로그아웃을 누를시에 작동 
			session.invalidate();										// 세션 소멸 
			response.sendRedirect("controller.jsp");						//controller 에게 다시 요청 -> (1)로 이동 (로그아웃 ))
		}
		else{
			if(command != null && command.equals("twitterInsert")){ 	 	// (4) 트윗 등록을 누를시에 작동 한다 
				twitterDO.setId((String)session.getAttribute("id"));		//세션 id 값을 받아와서 (형변환 해준후에 )
				twitterDAO.insertTwitter(twitterDO);						//DAO에 있는 insertTwitter 메소드 동작 
				
				
			}
			session.setAttribute("list",twitterDAO.getAllTwitter());  // (5) 공통 기능 (로그아웃이 아니면 화면 보여주기) 
			pageContext.forward(viewPath + "twitterList.jsp");
		}
		
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
